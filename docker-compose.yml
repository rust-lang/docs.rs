version: "3.4"

x-healthcheck: &healthcheck-interval
  interval: 1s
  timeout: 1s
  start_period: 10s
  # TODO: https://github.com/docker/compose/issues/10461
  # interval: 10s
  # start_interval: 1s

x-environment: &environment
    RUST_BACKTRACE: true

    DOCSRS_PREFIX: /opt/docsrs/prefix

    DOCSRS_DATABASE_URL: postgresql://cratesfyi:password@db
    DOCSRS_MIN_POOL_SIZE: 2
    DOCSRS_MAX_POOL_SIZE: 10

    DOCSRS_STORAGE_BACKEND: s3

    S3_ENDPOINT: http://s3:9000
    AWS_ACCESS_KEY_ID: cratesfyi
    AWS_SECRET_ACCESS_KEY: secret_key

    DOCSRS_RENDER_THREADS: 2

    DOCSRS_RUSTWIDE_WORKSPACE: /opt/docsrs/rustwide
    DOCSRS_DOCKER: true
    DOCSRS_DOCKER_IMAGE: ghcr.io/rust-lang/crates-build-env/linux-micro
    DOCSRS_BUILD_CPU_LIMIT: 2
    DOCSRS_INCLUDE_DEFAULT_TARGETS: false

x-gui-tests-environment: &gui-tests-environment
    << : *environment
    DOCSRS_DATABASE_URL: postgresql://cratesfyi:password@db/gui-tests
    DOCSRS_S3_BUCKET: gui-tests

x-builder: &builder
    build:
        context: .
        dockerfile: ./dockerfiles/Dockerfile
        target: build-server
    depends_on:
        - db
        - s3
    environment: *environment
    env_file:
        - .docker.env
    healthcheck:
        << : *healthcheck-interval
        test: curl --silent --fail localhost:3000/about/metrics

services:
    web: &web
        build:
            context: .
            dockerfile: ./dockerfiles/Dockerfile
            target: web-server
        platform: "linux/amd64"
        depends_on:
            - db
            - s3
        ports:
            - "3000:80"
        environment: *environment
        env_file:
            - .docker.env
        healthcheck:
            << : *healthcheck-interval
            test: curl --silent --fail localhost:80/about/metrics

    # Include the registry watcher with `docker compose --profile watch up --build --wait`
    registry-watcher:
        build:
            context: .
            dockerfile: ./dockerfiles/Dockerfile
            target: registry-watcher
        platform: "linux/amd64"
        depends_on:
            - db
        volumes:
            - "cratesio-index:/opt/docsrs/prefix/crates.io-index"
        environment: *environment
        env_file:
            - .docker.env
        profiles:
            - watch
            - all
        healthcheck:
            << : *healthcheck-interval
            test: curl --silent --fail localhost:3000/about/metrics

    builder-a:
        << : *builder
        volumes:
            - ".rustwide-docker/builder-a:/opt/docsrs/rustwide"
            - "/var/run/docker.sock:/var/run/docker.sock"

    builder-b:
        << : *builder
        volumes:
            - ".rustwide-docker/builder-b:/opt/docsrs/rustwide"
            - "/var/run/docker.sock:/var/run/docker.sock"

    cli: &cli
        build:
            context: .
            dockerfile: ./dockerfiles/Dockerfile
            target: cli
        depends_on:
            - db
            - s3
        environment: *environment
        env_file:
            - .docker.env
        profiles:
            - all

    db:
        build:
            context: ./dockerfiles
            dockerfile: ./Dockerfile-postgres
        volumes:
            - postgres-data:/var/lib/postgresql/data
        environment:
            POSTGRES_USER: cratesfyi
            POSTGRES_PASSWORD: password
        ports:
            # Use a non-standard port on the host to avoid conflicting with existing postgres servers
            - "127.0.0.1:15432:5432"
        healthcheck:
            << : *healthcheck-interval
            test: pg_isready --username cratesfyi

    s3:
        image: minio/minio
        entrypoint: >
            /bin/sh -c "
                set -meu
                mc alias rm s3 || true
                mc alias rm gcs || true
                mc alias rm local || true
                mc alias rm play || true
                minio server /data --console-address ":9001" &
                sleep 1
                mc alias set local http://s3:9000 cratesfyi secret_key
                mc mb --ignore-existing s3/rust-docs-rs
                fg
            "
        ports:
            - "127.0.0.1:9000:9000"
            - "127.0.0.1:9001:9001"
        volumes:
            - minio-data:/data
        environment:
            MINIO_ROOT_USER: cratesfyi
            MINIO_ROOT_PASSWORD: secret_key
        healthcheck:
            << : *healthcheck-interval
            test: mc ready local

    prometheus:
        build:
            context: ./dockerfiles
            dockerfile: ./Dockerfile-prometheus
        ports:
            - "127.0.0.1:9090:9090"
        healthcheck:
            << : *healthcheck-interval
            test: promtool check healthy

    gui-tests-cli:
        << : *cli
        environment: *gui-tests-environment
        profiles:
            - all

    gui-tests-builder:
        << : *builder
        environment: *gui-tests-environment
        volumes:
            - ".rustwide-docker/builder-gui-tests:/opt/docsrs/rustwide"
            - "/var/run/docker.sock:/var/run/docker.sock"
        profiles:
            - all

    gui-tests-web:
        << : *web
        ports:
            - "3001:80"
        environment: *gui-tests-environment
        profiles:
            - all

    gui-tests:
        build:
            context: gui-tests
        depends_on:
            - gui-tests-web
        environment:
            SERVER_URL: http://gui-tests-web
        profiles:
            - all

volumes:
    postgres-data: {}
    minio-data: {}
    cratesio-index: {}
